<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Add Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <style>
    /* Sidebar and Main Content Layout */
    .content-main {
      margin-left: 250px;
      padding: 30px;
      background-color: #f5f5f5;
      min-height: 100vh;
    }

    .sidebar {
      width: 250px;
      flex-shrink: 0;
    }

    /* Form Section Styling */
    .card {
      border: none;
      border-radius: 20px;
      box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
      background: white;
      overflow: hidden;
    }

    .card-body {
      padding: 0;
    }

    .col-md-3 {
      padding: 30px;
      border-right: 1px solid #f0f0f0;
      background: #fafafa;
      margin: 0;
    }

    .form-label {
      font-weight: 600;
      color: #555;
      margin-bottom: 8px;
      font-size: 14px;
    }

    .form-control {
      border: 1px solid #e0e0e0;
      border-radius: 10px;
      padding: 12px 15px;
      font-size: 14px;
      background: white;
      transition: all 0.3s ease;
      margin-bottom: 20px;
    }

    .form-control:focus {
      border-color: #007bff;
      box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
      outline: none;
    }

    textarea.form-control {
      min-height: 100px;
      resize: vertical;
    }

    .btn-primary {
      background: #17a2b8;
      border: none;
      border-radius: 10px;
      padding: 12px 0;
      width: 100%;
      font-weight: 600;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background: #138496;
      transform: translateY(-1px);
    }

    /* Image Section Styling */
    .image-preview, .cropped-image {
      max-width: 100%;
      max-height: 150px;
      display: none;
    }

    .image-cropper-container {
      display: none;
      margin-bottom: 20px;
    }

    .image-section {
      padding: 50px;
      background: #fafafa;
    }

    /* Error Messages */
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: -15px;
      margin-bottom: 15px;
      display: block;
    }

    /* Content Title */
    .content-title {
      text-align: center;
      color: #333;
      font-weight: 700;
      margin-bottom: 40px;
      font-size: 32px;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .content-main {
        margin-left: 0;
        padding: 20px;
      }

      .col-md-3 {
        border-right: none;
        border-bottom: 1px solid #f0f0f0;
      }
    }

    /* Clean form styling */
    .mb-4 {
      margin-bottom: 20px;
    }

    /* Ensure proper spacing */
    .d-grid {
      margin-top: 20px;
    }
  </style>
</head>

<body class="bg-white text-gray-700">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <%- include("../partials/admin/sidebar") %>

    <!-- Main Content -->
    <section class="content-main">
      <div class="content-header">
        <h2 class="content-title card-title">Add Product</h2>
      </div>
      <div class="card">
        <div class="card-body">
          <div class="row">
            <div class="col-md-3">
              <form id="productForm" action="/admin/addProducts" method="post" enctype="multipart/form-data">
                <div class="mb-4">
                  <label for="productName" class="form-label">Product Name *</label>
                  <input name="productName" class="form-control" type="text" placeholder="Type here" required/>
                  <div id="productName-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Product Description *</label>
                  <textarea name="description" class="form-control" placeholder="Type here" required></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">How To Use *</label>
                  <textarea name="howToUse" class="form-control" placeholder="Type here" required></textarea>
                  <div id="howToUse-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Product Category</label>
                  <select name="category" class="form-control">
                    <% for(let i=0; i<cat.length; i++) { %>
                      <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                    <% } %>
                  </select>
                  <div id="category-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Skin Type *</label>
                  <input name="skinType" class="form-control" type="text" placeholder="Type here" required/>
                  <div id="skinType-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Skin Concern *</label>
                  <input name="skinConcern" class="form-control" type="text" placeholder="Type here" required/>
                  <div id="skinConcern-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Regular Price *</label>
                  <input name="regularPrice" class="form-control" type="number" step="0.01" placeholder="Type here"/>
                  <div id="regularPrice-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Sale Price</label>
                  <input name="salePrice" class="form-control" type="number" step="0.01" placeholder="Type here"/>
                  <div id="salePrice-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Stock Quantity *</label>
                  <input name="quantity" class="form-control" type="number" placeholder="Type here"/>
                  <div id="quantity-error" class="error-message"></div>
                </div>
                <!-- Product Images Section -->
                <div class="mb-4 image-section">
                  <h3 class="form-label">Product Images *</h3>
                  <p class="text-gray-500 text-sm mb-2">Upload at least three product images. Square images are recommended.</p>
                  <div id="images-error" class="error-message"></div>
                  <div class="grid grid-cols-1 gap-3">
                    <!-- Image 1 -->
                    <div>
                      <label class="form-label">Image 1 (Required)</label>
                      <div class="mb-2">
                        <img id="imgView1" src="" alt="Preview" class="image-preview">
                      </div>
                      <div class="mb-2">
                        <img id="croppedImg1" src="" alt="Cropped" class="cropped-image">
                      </div>
                      <div class="mb-2">
                        <input id="input1" name="images" type="file" accept="image/*" class="form-control" required>
                      </div>
                      <div class="image-cropper-container image-cropper-container-1">
                        <div class="flex justify-end gap-1 mt-1">
                          <button id="cancelButton1" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                          <button id="saveButton1" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                        </div>
                      </div>
                    </div>
                    <!-- Image 2 -->
                    <div>
                      <label class="form-label">Image 2 (Required)</label>
                      <div class="mb-2">
                        <img id="imgView2" src="" alt="Preview" class="image-preview">
                      </div>
                      <div class="mb-2">
                        <img id="croppedImg2" src="" alt="Cropped" class="cropped-image">
                      </div>
                      <div class="mb-2">
                        <input id="input2" name="images" type="file" accept="image/*" class="form-control" required>
                      </div>
                      <div class="image-cropper-container image-cropper-container-2">
                        <div class="flex justify-end gap-1 mt-1">
                          <button id="cancelButton2" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                          <button id="saveButton2" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                        </div>
                      </div>
                    </div>
                    <!-- Image 3 -->
                    <div>
                      <label class="form-label">Image 3 (Required)</label>
                      <div class="mb-2">
                        <img id="imgView3" src="" alt="Preview" class="image-preview">
                      </div>
                      <div class="mb-2">
                        <img id="croppedImg3" src="" alt="Cropped" class="cropped-image">
                      </div>
                      <div class="mb-2">
                        <input id="input3" name="images" type="file" accept="image/*" class="form-control" required>
                      </div>
                      <div class="image-cropper-container image-cropper-container-3">
                        <div class="flex justify-end gap-1 mt-1">
                          <button id="cancelButton3" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                          <button id="saveButton3" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                        </div>
                      </div>
                    </div>
                    <!-- Image 4 -->
                    <div>
                      <label class="form-label">Image 4 (Optional)</label>
                      <div class="mb-2">
                        <img id="imgView4" src="" alt="Preview" class="image-preview">
                      </div>
                      <div class="mb-2">
                        <img id="croppedImg4" src="" alt="Cropped" class="cropped-image">
                      </div>
                      <div class="mb-2">
                        <input id="input4" name="images" type="file" accept="image/*" class="form-control">
                      </div>
                      <div class="image-cropper-container image-cropper-container-4">
                        <div class="flex justify-end gap-1 mt-1">
                          <button id="cancelButton4" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                          <button id="saveButton4" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="d-grid">
                  <button id="submitButton" type="button" class="btn btn-primary">Add Product</button>
                </div>
              </form>
            </div>
            <!-- Placeholder for potential table section -->
            <div class="col-md-8"></div>
          </div>
        </div>
      </div>
    </section>
    <%- include("../partials/admin/footer") %>
  
  <script>
    let cropperInstances = {};
    let croppedImageBlobs = {};

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) errorElement.textContent = message;
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName('error-message');
      Array.from(errorElements).forEach(element => element.textContent = '');
    }

    function initImageHandler(imageNumber) {
      const fileInput = document.getElementById(`input${imageNumber}`);
      const imagePreview = document.getElementById(`imgView${imageNumber}`);
      const croppedImage = document.getElementById(`croppedImg${imageNumber}`);
      const cropperContainer = document.querySelector(`.image-cropper-container-${imageNumber}`);
      const saveButton = document.getElementById(`saveButton${imageNumber}`);
      const cancelButton = document.getElementById(`cancelButton${imageNumber}`);

      fileInput.addEventListener('change', function(event) {
        if (event.target.files && event.target.files[0]) {
          const file = event.target.files[0];
          const reader = new FileReader();
          
          reader.onload = function(e) {
            imagePreview.src = e.target.result;
            imagePreview.style.display = 'block';
            cropperContainer.style.display = 'block';

            if (cropperInstances[imageNumber]) {
              cropperInstances[imageNumber].destroy();
            }

            cropperInstances[imageNumber] = new Cropper(imagePreview, {
              aspectRatio: 1,
              viewMode: 1,
              autoCropArea: 1,
              responsive: true,
              restore: false,
              guides: true,
              center: true,
              highlight: false,
              cropBoxMovable: true,
              cropBoxResizable: true,
              toggleDragModeOnDblclick: false
            });
          };
          reader.readAsDataURL(file);
        }
      });

      if (saveButton) {
        saveButton.addEventListener('click', function() {
          if (cropperInstances[imageNumber]) {
            const canvas = cropperInstances[imageNumber].getCroppedCanvas({
              width: 440,
              height: 440,
              fillColor: '#fff',
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high'
            });
            
            if (canvas) {
              croppedImage.src = canvas.toDataURL('image/jpeg', 0.9);
              croppedImage.style.display = 'block';
              imagePreview.style.display = 'none';
              
              canvas.toBlob(function(blob) {
                const croppedFile = new File([blob], `cropped-image-${imageNumber}.jpg`, {
                  type: 'image/jpeg',
                  lastModified: new Date().getTime()
                });
                
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                fileInput.files = dataTransfer.files;
                
                croppedImageBlobs[imageNumber] = blob;
                
                cropperInstances[imageNumber].destroy();
                cropperInstances[imageNumber] = null;
                cropperContainer.style.display = 'none';
              }, 'image/jpeg', 0.9);
            }
          }
        });
      }

      if (cancelButton) {
        cancelButton.addEventListener('click', function() {
          if (cropperInstances[imageNumber]) {
            cropperInstances[imageNumber].destroy();
            cropperInstances[imageNumber] = null;
          }
          cropperContainer.style.display = 'none';
          fileInput.value = '';
        });
      }
    }

    function initAllImageHandlers() {
      for (let i = 1; i <= 4; i++) {
        initImageHandler(i);
      }
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      const productName = document.querySelector('[name="productName"]').value.trim();
      if (!productName) {
        displayErrorMessage('productName-error', 'Please enter a product name');
        isValid = false;
      }

      const description = document.querySelector('[name="description"]').value.trim();
      if (!description) {
        displayErrorMessage('description-error', 'Please enter a product description');
        isValid = false;
      }

      const howToUse = document.querySelector('[name="howToUse"]').value.trim();
      if (!howToUse) {
        displayErrorMessage('howToUse-error', 'Please enter how to use instructions');
        isValid = false;
      }

      const regularPrice = document.querySelector('[name="regularPrice"]').value.trim();
      if (!regularPrice || !/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price (e.g., 10 or 10.99)');
        isValid = false;
      }

      const salePrice = document.querySelector('[name="salePrice"]').value.trim();
      if (salePrice) {
        if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
          displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price (e.g., 8 or 8.99)');
          isValid = false;
        } else if (parseFloat(regularPrice) <= parseFloat(salePrice)) {
          displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
          isValid = false;
        }
      }

      const quantity = document.querySelector('[name="quantity"]').value.trim();
      if (!quantity || !/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative integer for quantity');
        isValid = false;
      }

      const skinType = document.querySelector('[name="skinType"]').value.trim();
      if (!skinType) {
        displayErrorMessage('skinType-error', 'Please enter a skin type');
        isValid = false;
      }

      const skinConcern = document.querySelector('[name="skinConcern"]').value.trim();
      if (!skinConcern) {
        displayErrorMessage('skinConcern-error', 'Please enter a skin concern');
        isValid = false;
      }

      let imageCount = 0;
      for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        if (input && input.files.length > 0) imageCount++;
      }
      if (imageCount < 3) {
        displayErrorMessage('images-error', 'Please upload at least 3 images');
        isValid = false;
      }

      return isValid;
    }

    function submitProductForm() {
      if (!validateForm()) {
        return;
      }

      const form = document.getElementById('productForm');
      const formData = new FormData(form);
      
      fetch('/admin/addProducts', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = data.redirectUrl || '/admin/products';
        } else {
          displayErrorMessage('productName-error', data.error || 'Failed to add product');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        displayErrorMessage('productName-error', 'An error occurred while adding the product');
      });
    }

    document.addEventListener('DOMContentLoaded', function() {
      initAllImageHandlers();

      const submitButton = document.getElementById('submitButton');
      if (submitButton) {
        submitButton.addEventListener('click', function(e) {
          e.preventDefault();
          submitProductForm();
        });
      }
    });
  </script>
</body>
</html>