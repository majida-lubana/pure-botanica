<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Edit Product</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <!-- Cropper.js CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <style>
    :root {
      --primary: #10856b;
      --primary-hover: #19615c;
      --secondary: #6b7280;
      --light: #f9fafb;
      --border: #e5e7eb;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      background-color: #f3f4f6;
    }
    
    .form-input:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(6, 105, 121, 0.2);
    }
    
    .image-preview, .cropped-image {
      max-width: 100%;
      max-height: 150px;
      display: none;
      margin-bottom: 10px;
    }
    
    .image-cropper-container {
      display: none;
    }
    
    .form-control {
      width: 100%;
      padding: 8px;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
    }
    
    .error-message {
      color: #dc2626;
      font-size: 0.875rem;
      margin-bottom: 10px;
    }
    
    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 500;
      color: #374151;
      margin-bottom: 4px;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen py-8">
  <div class="max-w-2xl mx-auto bg-white rounded-xl shadow-sm overflow-hidden">
    <!-- Header -->
    <div class="bg-green-600 text-white px-6 py-4">
      <h1 class="text-2xl font-bold">Edit Product</h1>
      <p class="text-indigo-100">Update product details below</p>
    </div>
    
    <!-- Form Container -->
    <div class="px-6 py-6">
      <form action="/admin/updateProduct/<%= product._id %>" method="post" class="space-y-5">
        <!-- Product Name -->
        <div>
          <label for="productName" class="block text-sm font-medium text-gray-700 mb-1">Product Name *</label>
          <input
            type="text"
            id="productName"
            name="productName"
            value="<%= product.productName %>"
            required
            class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
            placeholder="Enter product name"
          />
        </div>

        <!-- Product Description -->
        <div>
          <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-1">Product Description *</label>
          <textarea
            id="productDescription"
            name="productDescription"
            required
            rows="3"
            class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
            placeholder="Describe the product"
          ><%= product.description %></textarea>
        </div>

        <!-- How to Use -->
        <div>
          <label for="howToUse" class="block text-sm font-medium text-gray-700 mb-1">How to Use *</label>
          <textarea
            id="howToUse"
            name="howToUse"
            required
            rows="2"
            class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
            placeholder="Instructions for use"
          ><%= product.howToUse %></textarea>
        </div>

        <!-- Category and Skin Type in a grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
          <!-- Product Category -->
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Product Category *</label>
            <select
              id="category"
              name="category"
              required
              class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
            >
              <option value="">Select a category</option>
              <% if (categories && categories.length > 0) { %>
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>" <%= product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                    <%= category.categoryName %>
                  </option>
                <% }) %>
              <% } %>
            </select>
          </div>

          <!-- Skin Type -->
          <div>
            <label for="skinType" class="block text-sm font-medium text-gray-700 mb-1">Skin Type *</label>
            <input
              type="text"
              id="skinType"
              name="skinType"
              value="<%= product.skinType %>"
              required
              class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
              placeholder="e.g., Oily, Dry"
            />
          </div>
        </div>

        <!-- Skin Concern -->
        <div>
          <label for="skinConcern" class="block text-sm font-medium text-gray-700 mb-1">Skin Concern *</label>
          <input
            type="text"
            id="skinConcern"
            name="skinConcern"
            value="<%= product.skinConcern %>"
            required
            class="w-full px-4 py-2.5 border border-gray-300 rounded-lg form-input focus:border-indigo-500 transition-colors"
            placeholder="e.g., Acne, Aging"
          />
        </div>

        <!-- Image Upload Section -->
        <div class="mb-4 image-section">
          <h3 class="form-label">Product Images *</h3>
          <p class="text-gray-500 text-sm mb-2">Upload at least three product images. Square images are recommended.</p>
          <div id="images-error" class="error-message"></div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Image 1 -->
            <div>
              <label class="form-label">Image 1 (Required)</label>
              <div class="mb-2">
                <img id="imgView1" src="" alt="Preview" class="image-preview">
              </div>
              <div class="mb-2">
                <img id="croppedImg1" src="" alt="Cropped" class="cropped-image">
              </div>
              <div class="mb-2">
                <input id="input1" name="images" type="file" accept="image/*" class="form-control" required>
              </div>
              <div class="image-cropper-container image-cropper-container-1">
                <div class="flex justify-end gap-1 mt-1">
                  <button id="cancelButton1" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                  <button id="saveButton1" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                </div>
              </div>
            </div>
            <!-- Image 2 -->
            <div>
              <label class="form-label">Image 2 (Required)</label>
              <div class="mb-2">
                <img id="imgView2" src="" alt="Preview" class="image-preview">
              </div>
              <div class="mb-2">
                <img id="croppedImg2" src="" alt="Cropped" class="cropped-image">
              </div>
              <div class="mb-2">
                <input id="input2" name="images" type="file" accept="image/*" class="form-control" required>
              </div>
              <div class="image-cropper-container image-cropper-container-2">
                <div class="flex justify-end gap-1 mt-1">
                  <button id="cancelButton2" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                  <button id="saveButton2" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                </div>
              </div>
            </div>
            <!-- Image 3 -->
            <div>
              <label class="form-label">Image 3 (Required)</label>
              <div class="mb-2">
                <img id="imgView3" src="" alt="Preview" class="image-preview">
              </div>
              <div class="mb-2">
                <img id="croppedImg3" src="" alt="Cropped" class="cropped-image">
              </div>
              <div class="mb-2">
                <input id="input3" name="images" type="file" accept="image/*" class="form-control" required>
              </div>
              <div class="image-cropper-container image-cropper-container-3">
                <div class="flex justify-end gap-1 mt-1">
                  <button id="cancelButton3" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                  <button id="saveButton3" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                </div>
              </div>
            </div>
            <!-- Image 4 -->
            <div>
              <label class="form-label">Image 4 (Optional)</label>
              <div class="mb-2">
                <img id="imgView4" src="" alt="Preview" class="image-preview">
              </div>
              <div class="mb-2">
                <img id="croppedImg4" src="" alt="Cropped" class="cropped-image">
              </div>
              <div class="mb-2">
                <input id="input4" name="images" type="file" accept="image/*" class="form-control">
              </div>
              <div class="image-cropper-container image-cropper-container-4">
                <div class="flex justify-end gap-1 mt-1">
                  <button id="cancelButton4" type="button" class="px-2 py-0.5 bg-gray-400 text-white rounded text-sm">Cancel</button>
                  <button id="saveButton4" type="button" class="px-2 py-0.5 bg-green-600 text-white rounded text-sm">Save Crop</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Buttons -->
        <div class="flex justify-end space-x-3 pt-4">
          <a href="/admin/product-list" class="px-5 py-2.5 rounded-lg border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors">
            Cancel
          </a>
          <button
            type="submit"
            class="bg-green-600 text-white px-5 py-2.5 rounded-lg font-medium hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Update Product
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- SweetAlert2 & jQuery & Cropper.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
  $(document).ready(function () {
    // Initialize Cropper.js for each image
    const croppers = {};

    // Function to initialize Cropper.js for an image input
    function initializeCropper(inputId, previewId, cropperContainerId, saveButtonId, cancelButtonId, croppedImgId, existingImage = null) {
      const input = document.getElementById(inputId);
      const preview = document.getElementById(previewId);
      const cropperContainer = document.querySelector(`.${cropperContainerId}`);
      const saveButton = document.getElementById(saveButtonId);
      const cancelButton = document.getElementById(cancelButtonId);
      const croppedImg = document.getElementById(croppedImgId);
      let cropper = null;

      // If there is an existing image, display it only in the cropped image element
      if (existingImage) {
        croppedImg.src = existingImage;
        croppedImg.style.display = 'block';
      }

      input.addEventListener('change', function (e) {
        const files = e.target.files;
        if (files && files.length > 0) {
          const reader = new FileReader();
          reader.onload = function (e) {
            preview.src = e.target.result;
            preview.style.display = 'block';
            cropperContainer.style.display = 'block';

            if (cropper) {
              cropper.destroy();
            }

            cropper = new Cropper(preview, {
              aspectRatio: 1,
              viewMode: 1,
              autoCropArea: 0.8,
              responsive: true,
            });
            croppers[inputId] = cropper;
          };
          reader.readAsDataURL(files[0]);
        }
      });

      saveButton.addEventListener('click', function () {
        if (cropper) {
          const canvas = cropper.getCroppedCanvas({
            width: 300,
            height: 300,
          });
          croppedImg.src = canvas.toDataURL('image/jpeg');
          croppedImg.style.display = 'block';
          cropperContainer.style.display = 'none';
          cropper.destroy();
          cropper = null;

          // Add cropped image data to a hidden input for form submission
          let hiddenInput = document.querySelector(`input[name="croppedImage${inputId.replace('input', '')}"]`);
          if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = `croppedImage${inputId.replace('input', '')}`;
            input.form.appendChild(hiddenInput);
          }
          hiddenInput.value = canvas.toDataURL('image/jpeg');
        }
      });

      cancelButton.addEventListener('click', function () {
        if (cropper) {
          cropper.destroy();
          cropper = null;
          preview.src = ''; // Clear preview
          preview.style.display = 'none';
          cropperContainer.style.display = 'none';
          input.value = ''; // Clear file input
          // Restore cropped image to existing image (if any)
          croppedImg.src = existingImage || '';
          croppedImg.style.display = existingImage ? 'block' : 'none';
        }
      });
    }

    // Initialize croppers for all images with existing images from product.productImages
    const existingImages = <%- JSON.stringify(product.productImages || []) %>;
    initializeCropper('input1', 'imgView1', 'image-cropper-container-1', 'saveButton1', 'cancelButton1', 'croppedImg1', existingImages[0] ? `/uploads/product-images/${existingImages[0]}` : null);
    initializeCropper('input2', 'imgView2', 'image-cropper-container-2', 'saveButton2', 'cancelButton2', 'croppedImg2', existingImages[1] ? `/uploads/product-images/${existingImages[1]}` : null);
    initializeCropper('input3', 'imgView3', 'image-cropper-container-3', 'saveButton3', 'cancelButton3', 'croppedImg3', existingImages[2] ? `/uploads/product-images/${existingImages[2]}` : null);
    initializeCropper('input4', 'imgView4', 'image-cropper-container-4', 'saveButton4', 'cancelButton4', 'croppedImg4', existingImages[3] ? `/uploads/product-images/${existingImages[3]}` : null);

    // Form submission
    $("form").submit(function (e) {
      e.preventDefault();

      // Validate at least three images are uploaded or existing
      const requiredInputs = ['input1', 'input2', 'input3'];
      let valid = true;
      const errorDiv = $('#images-error');
      errorDiv.text('');

      requiredInputs.forEach((id, index) => {
        const input = document.getElementById(id);
        const croppedImg = document.getElementById(`croppedImg${id.replace('input', '')}`);
        if ((!input.files || input.files.length === 0) && !croppedImg.src && !existingImages[index]) {
          valid = false;
          errorDiv.text('Please upload or retain all required images.');
        }
      });

      if (!valid) return;

      // Create FormData to include cropped images and existing images
      const formData = new FormData(this);
      requiredInputs.forEach((id, index) => {
        const croppedImg = document.getElementById(`croppedImg${id.replace('input', '')}`);
        if (croppedImg.src && croppedImg.src.startsWith('data:')) {
          // Convert base64 to Blob for new cropped images
          const base64 = croppedImg.src;
          const byteString = atob(base64.split(',')[1]);
          const mimeString = base64.split(',')[0].split(':')[1].split(';')[0];
          const ab = new ArrayBuffer(byteString.length);
          const ia = new Uint8Array(ab);
          for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
          }
          const blob = new Blob([ab], { type: mimeString });
          formData.append('images', blob, `image${index + 1}.jpg`);
        } else if (existingImages[index]) {
          // Append existing image paths if no new image is uploaded
          formData.append('existingImages', existingImages[index]);
        }
      });

      // Submit form via AJAX
      $.ajax({
        url: `/admin/updateProduct/<%= product._id %>`,
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
          if (response.success) {
            Swal.fire({
              icon: 'success',
              title: 'Product Updated!',
              text: 'Your product has been successfully updated.',
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              window.location.href = '/admin/product-table'; // Redirect to product table
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: response.message || 'Failed to update product.',
              confirmButtonColor: '#14b8a6',
            });
          }
        },
        error: function (xhr, status, error) {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while updating the product.',
            confirmButtonColor: '#14b8a6',
          });
        },
      });
    });
  });
</script>
</body>
</html>