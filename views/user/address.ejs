<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #006D77;
            --secondary-color: #E5F6F5;
            --accent-color: #83C5BE;
            --text-color: #1A3C34;
            --light-text: #468C87;
            --border-radius: 12px;
            --box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            --header-height: 80px;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #E5F6F5;
            color: var(--text-color);
            overflow-x: hidden;
            margin: 0;
        }

        .account-container {
            max-width: 1400px;
            width: 100%;
            margin: calc(var(--header-height) + 2rem) auto 2rem auto;
            padding: 0 1rem;
            display: flex;
            flex-wrap: nowrap;
            gap: 1rem;
        }

        .sidebar {
            flex: 0 0 250px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.5rem;
        }

        .addresses-container {
            flex: 1;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.5rem;
            min-width: 0;
        }

        @media (max-width: 768px) {
            .account-container {
                flex-direction: column;
                padding: 0 0.75rem;
                margin: calc(var(--header-height) + 1rem) auto 1rem auto;
            }

            .sidebar {
                flex: none;
                width: 100%;
                margin-bottom: 1rem;
            }

            .addresses-container {
                flex: none;
                width: 100%;
            }
        }

        .address-card {
            border: 1px solid var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            margin-bottom: 1rem;
            position: relative;
            transition: all 0.3s ease;
            background-color: #fff;
        }

        @media (min-width: 768px) {
            .address-card {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
        }

        .address-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--box-shadow);
        }

        .address-type {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 50px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        @media (min-width: 768px) {
            .address-type {
                top: 1rem;
                right: 1rem;
                padding: 0.25rem 0.75rem;
                font-size: 0.8rem;
            }
        }

        .address-type-home {
            background-color: #B2E4E0;
            color: #003F3D;
        }

        .address-type-work {
            background-color: #A3D8D5;
            color: #002A2B;
        }

        .address-name {
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 0.5rem;
            padding-right: 60px;
            word-break: break-word;
        }

        @media (min-width: 768px) {
            .address-name {
                font-size: 1.1rem;
            }
        }

        .address-details {
            color: var(--light-text);
            margin-bottom: 0.25rem;
            word-break: break-word;
            font-size: 0.9rem;
        }

        @media (min-width: 768px) {
            .address-details {
                font-size: 1rem;
            }
        }

        .address-actions {
            display: flex;
            margin-top: 1rem;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        @media (min-width: 768px) {
            .address-actions {
                margin-top: 1.5rem;
            }
        }

        .add-address-card {
            border: 2px dashed var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1.5rem 1rem;
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            background-color: #fff;
            min-height: 200px;
        }

        @media (min-width: 768px) {
            .add-address-card {
                padding: 2rem;
                margin-bottom: 1.5rem;
            }
        }

        .add-address-card:hover {
            border-color: var(--accent-color);
            background-color: var(--secondary-color);
        }

        .add-address-icon {
            font-size: 1.5rem;
            color: var(--accent-color);
            margin-bottom: 0.75rem;
        }

        @media (min-width: 768px) {
            .add-address-icon {
                font-size: 2rem;
                margin-bottom: 1rem;
            }
        }

        .btn-accent {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
            color: white;
        }

        .btn-accent:hover {
            background-color: #50868F;
            border-color: #50868F;
            color: white;
        }

        .btn-outline-accent {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .btn-outline-accent:hover {
            background-color: var(--accent-color);
            color: white;
        }

        .modal-header {
            background-color: var(--primary-color);
            color: white;
        }

        .modal-content {
            border-radius: var(--border-radius);
            overflow: hidden;
        }

        .default-badge {
            background-color: #2A9D8F;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 50px;
            font-size: 0.75rem;
            margin-left: 0.25rem;
            display: inline-block;
            white-space: nowrap;
        }

        @media (min-width: 768px) {
            .default-badge {
                font-size: 0.8rem;
                margin-left: 0.5rem;
            }
        }

        @media (max-width: 767px) {
            .header-container {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start !important;
            }

            .header-container .btn {
                width: 100%;
            }

            .address-actions .btn {
                flex: 1;
                min-width: 80px;
            }

            .modal-dialog {
                margin: 0.5rem;
            }

            .modal-body .row {
                margin-left: -5px;
                margin-right: -5px;
            }

            .modal-body .col-md-6 {
                padding-left: 5px;
                padding-right: 5px;
            }

            .form-label {
                margin-bottom: 0.25rem;
                font-size: 0.9rem;
            }

            .form-control,
            .form-select {
                font-size: 0.9rem;
                padding: 0.375rem 0.5rem;
            }
        }

        @media (min-width: 768px) and (max-width: 991px) {
            .col-lg-6 {
                flex: 0 0 100%;
                max-width: 100%;
            }
        }

        .loading {
            pointer-events: none;
            opacity: 0.7;
        }

        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }

        .form-control.is-invalid, .form-select.is-invalid {
            border-color: #dc3545;
        }
        .form-check-input.is-invalid {
            border-color: #dc3545;
        }
    </style>
</head>

<body>
    <%- include('../partials/user/header') %>
    <div class="account-container">
        <%- include('../partials/user/sidebar') %>
        <div class="addresses-container">
            <div class="d-flex justify-content-between align-items-center mb-4 header-container">
                <h2>Address Book</h2>
                <button class="btn btn-accent" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                    <i class="fas fa-plus me-2"></i> Add New Address
                </button>
            </div>

            <div class="row g-3" id="addressesContainer">
                <% if (Array.isArray(addresses) && addresses.length > 0) { %>
                    <% addresses.forEach(function(address) { %>
                        <div class="col-lg-6 col-md-12 mb-0" data-address-id="<%= address._id %>">
                            <div class="address-card">
                                <div class="address-type <%= address.addressType === 'Home' ? 'address-type-home' : 'address-type-work' %>">
                                    <%= address.addressType %>
                                </div>
                                <div class="address-name">
                                    <%= address.fullName %>
                                    <% if (address.isDefault) { %>
                                        <span class="default-badge">Default</span>
                                    <% } %>
                                </div>
                                <div class="address-details">
                                    <%= address.address %>
                                </div>
                                <div class="address-details">
                                    <%= address.city %>, <%= address.state %>
                                    <%= address.pincode %>
                                </div>
                                <div class="address-details">
                                    <%= address.country %>
                                </div>
                                <div class="address-details">Phone: <%= address.phone %>
                                </div>
                                <div class="address-actions">
                                    <button class="btn btn-sm btn-outline-secondary edit-address"
                                            data-id="<%= address._id %>" data-bs-toggle="modal"
                                            data-bs-target="#editAddressModal">
                                        <i class="fas fa-edit me-1"></i>Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-address"
                                            data-id="<%= address._id %>">
                                        <i class="fas fa-trash me-1"></i>Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } %>

                <div class="col-lg-6 col-md-12 mb-0">
                    <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <div class="add-address-icon">
                            <i class="fas fa-plus-circle"></i>
                        </div>
                        <h5>Add New Address</h5>
                        <p class="text-muted mb-0">Click to add a new shipping address</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                                <div class="text-danger small" id="nameError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="phone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="phone" name="phone" required>
                                <div class="text-danger small" id="phoneError"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="address" name="address" required>
                            <div class="text-danger small" id="addressError"></div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="city" class="form-label">City*</label>
                                <input type="text" class="form-control" id="city" name="city" required>
                                <div class="text-danger small" id="cityError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="state" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="state" name="state" required>
                                <div class="text-danger small" id="stateError"></div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="country" class="form-label">Country*</label>
                                <select class="form-select" id="country" name="country" required>
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India" selected>India</option>
                                </select>
                                <div class="text-danger small" id="countryError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="pincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="pincode" name="pincode" required>
                                <div class="text-danger small" id="pincodeError"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeHome" value="Home" checked required>
                                <label class="form-check-label" for="typeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeWork" value="Work">
                                <label class="form-check-label" for="typeWork">Work</label>
                            </div>
                            <div class="text-danger small" id="addressTypeError"></div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="addIsDefault" name="isDefault">
                            <label class="form-check-label" for="addIsDefault">Set as Default Address</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" id="saveAddressBtn" onclick="saveNewAddress()">Save Address</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editAddressForm">
                        <input type="hidden" id="editAddressId" name="addressId">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editFullName" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="editFullName" name="fullName" required>
                                <div class="text-danger small" id="editFullNameError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="editPhone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="editPhone" name="phone" required>
                                <div class="text-danger small" id="editPhoneError"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editAddress" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="editAddress" name="address" required>
                                <div class="text-danger small" id="editAddressError"></div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCity" class="form-label">City*</label>
                                <input type="text" class="form-control" id="editCity" name="city" required>
                                <div class="text-danger small" id="editCityError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="editState" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="editState" name="state" required>
                                <div class="text-danger small" id="editStateError"></div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCountry" class="form-label">Country*</label>
                                <select class="form-select" id="editCountry" name="country" required>
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India">India</option>
                                </select>
                                <div class="text-danger small" id="editCountryError"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="editPincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="editPincode" name="pincode" required>
                                <div class="text-danger small" id="editPincodeError"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeHome" value="Home" required>
                                <label class="form-check-label" for="editTypeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeWork" value="Work">
                                <label class="form-check-label" for="editTypeWork">Work</label>
                            </div>
                            <div class="text-danger small" id="editAddressTypeError"></div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="editIsDefault" name="isDefault">
                            <label class="form-check-label" for="editIsDefault">Set as Default Address</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" id="updateAddressBtn" onclick="updateAddress()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Address Modal -->
    <div class="modal fade" id="deleteAddressModal" tabindex="-1" aria-labelledby="deleteAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteAddressModalLabel">Delete Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <i class="fas fa-trash-alt text-danger mb-3" style="font-size: 3rem;"></i>
                        <p class="mb-2">Are you sure you want to delete this address?</p>
                        <p class="text-muted small">This action cannot be undone.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteAddress">Delete Address</button>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/user/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let deleteContext = null;

        function showLoading(button, text = 'Loading...') {
            if (button) {
                button.disabled = true;
                button.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>${text}`;
            }
        }

        function hideLoading(button, text = 'Save') {
            if (button) {
                button.disabled = false;
                button.innerHTML = text;
            }
        }

        function cleanupModalBackdrop() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style = '';
        }

        function displayFieldErrors(errors, formPrefix = '') {
            console.log('Displaying errors:', errors, 'with prefix:', formPrefix);
            
            // Clear previous errors
            const fields = ['name', 'phone', 'address', 'city', 'state', 'country', 'pincode', 'addressType'];
            fields.forEach(field => {
                const errorElement = document.getElementById(`${formPrefix}${field}Error`);
                const inputElement = document.getElementById(`${formPrefix}${field}`) || 
                                     document.querySelector(`input[name="${field}"]:checked`) || 
                                     document.querySelector(`select[name="${field}"]`);
                if (errorElement) errorElement.textContent = '';
                if (inputElement) inputElement.classList.remove('is-invalid');
            });

            // Clear fullName error for edit form
            if (formPrefix === 'edit') {
                const fullNameErrorElement = document.getElementById('editFullNameError');
                const fullNameInputElement = document.getElementById('editFullName');
                if (fullNameErrorElement) fullNameErrorElement.textContent = '';
                if (fullNameInputElement) fullNameInputElement.classList.remove('is-invalid');
            }

            if (!errors || typeof errors !== 'object') return;

            // Display new errors
            Object.keys(errors).forEach(field => {
                const errorMessages = errors[field];
                if (Array.isArray(errorMessages) && errorMessages.length > 0) {
                    let actualField = field;
                    
                    // Handle field name mapping for edit form
                    if (formPrefix === 'edit' && field === 'name') {
                        actualField = 'fullName';
                    }
                    
                    const errorElement = document.getElementById(`${formPrefix}${actualField}Error`);
                    const inputElement = document.getElementById(`${formPrefix}${actualField}`) || 
                                         document.querySelector(`input[name="${field}"]:checked`) || 
                                         document.querySelector(`select[name="${field}"]`);
                    
                    if (errorElement) {
                        errorElement.textContent = errorMessages[0]; // Show first error message
                    }
                    if (inputElement) {
                        inputElement.classList.add('is-invalid');
                    }
                    
                    console.log(`Set error for field ${actualField}: ${errorMessages[0]}`);
                }
            });
        }

        function createAddressHTML(address) {
            return `
                <div class="col-lg-6 col-md-12 mb-0" data-address-id="${address._id}">
                    <div class="address-card">
                        <div class="address-type ${address.addressType === 'Home' ? 'address-type-home' : 'address-type-work'}">
                            ${address.addressType}
                        </div>
                        <div class="address-name">
                            ${address.fullName}
                            ${address.isDefault ? '<span class="default-badge">Default</span>' : ''}
                        </div>
                        <div class="address-details">${address.address}</div>
                        <div class="address-details">
                            ${address.city}, ${address.state} ${address.pincode}
                        </div>
                        <div class="address-details">${address.country}</div>
                        <div class="address-details">Phone: ${address.phone}</div>
                        <div class="address-actions">
                            <button class="btn btn-sm btn-outline-secondary edit-address" data-id="${address._id}" data-bs-toggle="modal" data-bs-target="#editAddressModal">
                                <i class="fas fa-edit me-1"></i>Edit
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-address" data-id="${address._id}">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }

        function saveNewAddress() {
            console.log('Saving new address...');
            const form = document.getElementById('addAddressForm');
            const saveBtn = document.getElementById('saveAddressBtn');

            showLoading(saveBtn, 'Saving...');

            const formData = {
                name: document.getElementById('name').value,
                phone: document.getElementById('phone').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                country: document.getElementById('country').value,
                pincode: document.getElementById('pincode').value,
                addressType: document.querySelector('input[name="addressType"]:checked').value,
                isDefault: document.getElementById('addIsDefault').checked
            };

            console.log('Form data:', formData);

            fetch('/address/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Server response:', data);
                hideLoading(saveBtn, 'Save Address');

                if (data.success) {
                    const addressesContainer = document.getElementById('addressesContainer');
                    const addNewAddressCard = addressesContainer.querySelector('.add-address-card')?.closest('.col-lg-6');

                    if (addNewAddressCard) {
                        addNewAddressCard.insertAdjacentHTML('beforebegin', createAddressHTML(data.address));
                    } else {
                        addressesContainer.insertAdjacentHTML('beforeend', createAddressHTML(data.address));
                    }

                    if (data.address.isDefault) {
                        document.querySelectorAll('.address-card .default-badge').forEach(badge => {
                            const cardId = badge.closest('[data-address-id]')?.dataset.addressId;
                            if (cardId !== data.address._id) {
                                badge.remove();
                            }
                        });
                    }

                    const addAddressModal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
                    if (addAddressModal) {
                        addAddressModal.hide();
                    }

                    setTimeout(() => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Added!',
                            text: 'Your new address has been successfully added.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }, 100);

                    form.reset();
                    document.getElementById('typeHome').checked = true;
                    document.getElementById('country').value = 'India';
                    displayFieldErrors({});
                } else {
                    console.log('Validation errors:', data.errors);
                    displayFieldErrors(data.errors);
                    
                    let errorMessage = 'Failed to add address';
                    if (data.errors && typeof data.errors === 'object') {
                        const errorMessages = Object.values(data.errors).flat();
                        if (errorMessages.length > 0) {
                            errorMessage = errorMessages.join('\n');
                        }
                    } else if (data.message) {
                        errorMessage = data.message;
                    }
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: errorMessage,
                        showConfirmButton: true
                    });
                }
            })
            .catch(error => {
                hideLoading(saveBtn, 'Save Address');
                console.error('Add address error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while adding the address'
                });
            });
        }

        function updateAddress() {
            console.log('Updating address...');
            const form = document.getElementById('editAddressForm');
            const updateBtn = document.getElementById('updateAddressBtn');
            const addressId = document.getElementById('editAddressId').value;

            showLoading(updateBtn, 'Updating...');

            const formData = {
                fullName: document.getElementById('editFullName').value,
                phone: document.getElementById('editPhone').value,
                address: document.getElementById('editAddress').value,
                city: document.getElementById('editCity').value,
                state: document.getElementById('editState').value,
                country: document.getElementById('editCountry').value,
                pincode: document.getElementById('editPincode').value,
                addressType: document.querySelector('input[name="addressType"]:checked').value,
                isDefault: document.getElementById('editIsDefault').checked
            };

            console.log('Update form data:', formData);

            fetch(`/address/edit/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Update response:', data);
                hideLoading(updateBtn, 'Save Changes');

                if (data.success) {
                    const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
                    if (addressCard) {
                        addressCard.outerHTML = createAddressHTML(data.address);

                        if (data.address.isDefault) {
                            document.querySelectorAll('.address-card .default-badge').forEach(badge => {
                                const cardId = badge.closest('[data-address-id]')?.dataset.addressId;
                                if (cardId !== data.address._id) {
                                    badge.remove();
                                }
                            });
                        }
                    }

                    const editAddressModal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                    if (editAddressModal) {
                        editAddressModal.hide();
                    }

                    setTimeout(() => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Updated!',
                            text: 'Your address has been successfully updated.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }, 100);

                    displayFieldErrors({}, 'edit');
                } else {
                    console.log('Update validation errors:', data.errors);
                    let errorMessage = data.message || 'Failed to update address';
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: errorMessage,
                        showConfirmButton: true
                    });
                }
            })
            .catch(error => {
                hideLoading(updateBtn, 'Save Changes');
                console.error('Update address error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the address'
                });
            });
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM loaded, initializing event listeners...');
            const addressesContainer = document.getElementById('addressesContainer');

            // Edit Address
            addressesContainer.addEventListener('click', function (event) {
                const editBtn = event.target.closest('.edit-address');
                if (editBtn) {
                    console.log('Edit button clicked');
                    const addressId = editBtn.getAttribute('data-id');
                    console.log('Fetching address:', addressId);

                    fetch(`/address/${addressId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('Fetched address data:', data);
                            if (data.success) {
                                const address = data.address;
                                document.getElementById('editAddressId').value = address._id;
                                document.getElementById('editFullName').value = address.fullName;
                                document.getElementById('editPhone').value = address.phone;
                                document.getElementById('editAddress').value = address.address;
                                document.getElementById('editCity').value = address.city;
                                document.getElementById('editState').value = address.state;
                                document.getElementById('editCountry').value = address.country;
                                document.getElementById('editPincode').value = address.pincode;
                                document.getElementById('editTypeHome').checked = address.addressType === 'Home';
                                document.getElementById('editTypeWork').checked = address.addressType === 'Work';
                                document.getElementById('editIsDefault').checked = address.isDefault;
                                displayFieldErrors({}, 'edit'); // Clear errors when opening modal
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: data.message || 'Failed to load address details'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Fetch address error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to load address details'
                            });
                        });
                }
            });

            // Delete Address - Show Modal
            addressesContainer.addEventListener('click', function (event) {
                const deleteBtn = event.target.closest('.delete-address');
                if (deleteBtn) {
                    console.log('Delete button clicked');
                    deleteContext = {
                        id: deleteBtn.getAttribute('data-id'),
                        card: deleteBtn.closest('[data-address-id]')
                    };

                    console.log('Delete context:', deleteContext);

                    if (!deleteContext.id || !deleteContext.card) {
                        console.error('Delete: Invalid context', deleteContext);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Invalid address selected.'
                        });
                        return;
                    }

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteAddressModal'));
                    deleteModal.show();
                }
            });

            // Confirm Delete
            document.getElementById('confirmDeleteAddress').addEventListener('click', function () {
                console.log('Confirm delete clicked, context:', deleteContext);
                
                if (!deleteContext || !deleteContext.id || !deleteContext.card) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No address selected for deletion.'
                    });
                    const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteAddressModal'));
                    if (deleteModal) {
                        deleteModal.hide();
                    }
                    deleteContext = null;
                    return;
                }

                const confirmBtn = document.getElementById('confirmDeleteAddress');
                showLoading(confirmBtn, 'Deleting...');

                fetch(`/address/${deleteContext.id}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Delete response:', data);
                    hideLoading(confirmBtn, 'Delete Address');

                    if (data.success) {
                        if (deleteContext.card && deleteContext.card.parentNode) {
                            deleteContext.card.remove();
                        }

                        const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteAddressModal'));
                        if (deleteModal) {
                            deleteModal.hide();
                        }

                        setTimeout(() => {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: 'The address has been successfully deleted.',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        }, 100);
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to delete address'
                        });
                    }
                })
                .catch(error => {
                    hideLoading(confirmBtn, 'Delete Address');
                    console.error('Delete address error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while deleting the address'
                    });
                })
                .finally(() => {
                    deleteContext = null;
                });
            });

            // Clean up modals
            ['addAddressModal', 'editAddressModal', 'deleteAddressModal'].forEach(modalId => {
                document.getElementById(modalId).addEventListener('hidden.bs.modal', () => {
                    cleanupModalBackdrop();
                    if (modalId === 'addAddressModal') {
                        displayFieldErrors({}); // Clear errors for addAddressModal
                    } else if (modalId === 'editAddressModal') {
                        displayFieldErrors({}, 'edit'); // Clear errors for editAddressModal
                    }
                });
            });

            // Reset forms when modals open
            document.getElementById('addAddressModal').addEventListener('show.bs.modal', () => {
                document.getElementById('addAddressForm').reset();
                document.getElementById('typeHome').checked = true;
                document.getElementById('country').value = 'India';
                displayFieldErrors({});
            });
        });
    </script>
</body>

</html>