
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Beauty Cart - Your Shopping Basket</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body { 
      font-family: 'Lato', sans-serif; 
      background-color: #f9fafb; 
    }
    .quantity-input { 
      appearance: none; 
      -webkit-appearance: none; 
      background: transparent; 
      text-align: center; 
      width: 40px; 
      border: 1px solid #e5e7eb;
      border-radius: 4px;
    }
    .quantity-input::-webkit-inner-spin-button, 
    .quantity-input::-webkit-outer-spin-button { 
      -webkit-appearance: none; 
      margin: 0; 
    }
    .discount-badge {
      background-color: #10b981;
      color: white;
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 0.75rem;
    }
  </style>
</head>
<body>
  <%- include('../partials/user/header') %>

  <div class="container mx-auto px-4 pt-24 pb-8">
    <h1 class="text-3xl font-bold mb-6 text-center text-gray-800">Shopping Cart</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Cart Items Section -->
      <div class="lg:col-span-2">
        <% if (cart && cart.items && cart.items.length > 0) { %>
          <div class="bg-white rounded-lg shadow overflow-hidden" id="cart-items">
              <!-- Cart Header -->
              <div class="hidden md:grid md:grid-cols-12 gap-4 px-6 py-4 bg-gray-50 border-b">
                <div class="md:col-span-6">
                  <span class="font-semibold text-gray-700">Product</span>
                </div>
                <div class="md:col-span-2 text-center">
                  <span class="font-semibold text-gray-700">Price</span>
                </div>
                <div class="md:col-span-2 text-center">
                  <span class="font-semibold text-gray-700">Quantity</span>
                </div>
                <div class="md:col-span-2 text-right">
                  <span class="font-semibold text-gray-700">Total</span>
                </div>
              </div>
              
<% cart.items.forEach((item, index) => { %>
  <div class="border-b last:border-b-0 cart-item" data-product-id="<%= item.productId._id %>">
    <div class="md:grid md:grid-cols-12 gap-4 p-4 flex flex-wrap">
      <!-- Product Information -->
      <div class="md:col-span-6 flex items-center space-x-4 mb-4 md:mb-0 w-full md:w-auto">
        <div class="w-20 h-20 flex-shrink-0">
          <% if (item.productId.productImages && item.productId.productImages.length > 0) { %>
            <img 
              src="/Uploads/product-images/<%= item.productId.productImages[0] %>" 
              alt="<%= item.productId.productName %>" 
              class="w-full h-full object-cover rounded"
              onerror="this.src='/images/placeholder.jpg'"
            >
          <% } else { %>
            <img 
              src="/images/placeholder.jpg" 
              alt="No Image" 
              class="w-full h-full object-contain rounded"
            >
          <% } %>
        </div>
        <div>
          <h3 class="font-medium text-gray-800">
            <%= item.productId.productName %>
          </h3>
          <p class="text-sm text-gray-500 mt-1 hidden md:block">
            <%= item.productId.description ? item.productId.description.substring(0, 40) + '...' : '' %>
          </p>
        </div>
      </div>
      
      <!-- Price -->
      <div class="md:col-span-2 flex md:justify-center items-center mb-4 md:mb-0 w-1/2 md:w-auto">
        <% 
          const salePrice = item.productId?.salePrice || 0;
          const regularPrice = item.productId?.regularPrice || 0;
        %>
        <div class="md:text-center">
          <% if (regularPrice > salePrice) { %>
            <div class="flex md:flex-col md:items-center">
              <span class="text-gray-500 line-through text-sm mr-2 md:mr-0">₹<%= regularPrice.toFixed(2) %></span>
              <span class="text-gray-900 font-medium">₹<%= salePrice.toFixed(2) %></span>
            </div>
            <% if (regularPrice > salePrice) { %>
              <span class="discount-badge md:mt-1 md:inline-block hidden">
                <%= Math.round(((regularPrice - salePrice) / regularPrice) * 100) %>% off
              </span>
            <% } %>
          <% } else { %>
            <span class="text-gray-900 font-medium">₹<%= salePrice.toFixed(2) %></span>
          <% } %>
        </div>
      </div>
      
      <!-- Quantity -->
      <div class="md:col-span-2 flex md:justify-center items-center mb-4 md:mb-0 w-1/2 md:w-auto">
        <div class="flex items-center border rounded">
          <button 
            data-action="decrease" 
            data-product-id="<%= item.productId._id %>"
            class="px-2 py-1 text-gray-600 hover:bg-gray-100 update-quantity-btn"
          >
            -
          </button>
          <input 
            type="number" 
            name="quantity" 
            value="<%= item.quantity %>" 
            min="1" 
            max="<%= item.productId.quantity + item.quantity %>"
            class="quantity-input text-center w-10"
            readonly
          >
          <button 
            data-action="increase" 
            data-product-id="<%= item.productId._id %>"
            class="px-2 py-1 text-gray-600 hover:bg-gray-100 update-quantity-btn"
          >
            +
          </button>
        </div>
      </div>
      
      <!-- Total -->
      <div class="md:col-span-2 flex md:justify-end items-center w-full md:w-auto justify-between">
        <span 
          class="text-gray-900 font-medium total-price md:text-right" 
          data-total="<%= (salePrice * item.quantity).toFixed(2) %>"
          data-sale-price="<%= salePrice.toFixed(2) %>"
        >
          ₹<%= (salePrice * item.quantity).toFixed(2) %>
        </span>
        <form action="/cart/remove" method="POST" class="remove-form ml-4">
          <input type="hidden" name="productId" value="<%= item.productId._id %>">
          <button type="submit" class="text-gray-400 hover:text-red-500">
            <i class="fas fa-trash"></i>
          </button>
        </form>
      </div>
    </div>
  </div>
<% }); %>
            </div>

          
         <!-- Pagination Controls -->
    <% if (pagination.totalPages > 1) { %>
      <div class="mt-6 flex justify-center items-center space-x-2">
        <!-- Previous Button -->
        <a
          href="/cart?page=<%= pagination.currentPage - 1 %>"
          class="px-4 py-2 border rounded text-gray-600 hover:bg-gray-100 <%= !pagination.hasPrevPage ? 'pointer-events-none opacity-50' : '' %>"
        >
          Previous
        </a>

        <!-- Page Numbers -->
        <% for (let i = 1; i <= pagination.totalPages; i++) { %>
          <a
            href="/cart?page=<%= i %>"
            class="px-4 py-2 border rounded <%= pagination.currentPage === i ? 'bg-black text-white' : 'text-gray-600 hover:bg-gray-100' %>"
          >
            <%= i %>
          </a>
        <% } %>

        <!-- Next Button -->
        <a
          href="/cart?page=<%= pagination.currentPage + 1 %>"
          class="px-4 py-2 border rounded text-gray-600 hover:bg-gray-100 <%= !pagination.hasNextPage ? 'pointer-events-none opacity-50' : '' %>"
        >
          Next
        </a>
      </div>
    <% } %>

    <div class="mt-4 flex justify-between items-center">
      <a href="/shop" class="text-blue-600 hover:text-blue-800 flex items-center">
        <i class="fas fa-arrow-left mr-2"></i> Continue Shopping
      </a>
    </div>
  <% } else { %>
    <div class="text-center bg-white p-10 rounded-lg shadow">
      <div class="text-gray-400 mb-6">
        <i class="fas fa-shopping-cart text-5xl"></i>
      </div>
      <h2 class="text-2xl font-medium text-gray-700 mb-4">Your cart is empty</h2>
      <p class="text-gray-500 mb-6">Looks like you haven't added any products to your cart yet.</p>
      <a
        href="/shop"
        class="inline-block bg-black text-white py-2 px-6 rounded hover:bg-gray-900 transition"
      >
        Start Shopping
      </a>
    </div>
  <% } %>
</div>
      
<!-- Order Summary Section -->
<div class="lg:col-span-1">
  <div class="bg-white rounded-lg shadow p-6 sticky top-6" id="order-summary">
    <h2 class="text-lg font-bold mb-4 text-gray-800 pb-2 border-b">
      Order Summary
    </h2>
    <div class="space-y-3 mb-6">
      <div class="flex justify-between text-sm">
        <span class="text-gray-600">Subtotal</span>
        <span id="subtotal">₹<%= subtotal.toFixed(2) %></span>
      </div>
      <% if (discount > 0) { %>
        <div class="flex justify-between text-sm text-green-600">
          <span>Discount</span>
          <span id="discount">-₹<%= discount.toFixed(2) %></span>
        </div>
      <% } %>
      <div class="flex justify-between text-sm">
        <span class="text-gray-600">Shipping</span>
        <span id="shipping">₹<%= shippingCost.toFixed(2) %></span>
      </div>
      <div class="flex justify-between text-sm">
        <span class="text-gray-600">Tax</span>
        <span id="tax">₹<%= tax.toFixed(2) %></span>
      </div>
    </div>
    <div class="flex justify-between font-bold text-lg pt-4 border-t">
      <span>Total</span>
      <span id="total">₹<%= total.toFixed(2) %></span>
    </div>
    <a href="/checkout" class="block mt-6">
      <button class="w-full bg-black text-white py-3 rounded hover:bg-gray-900 transition font-medium">
        Proceed to Checkout
      </button>
    </a>
    <div class="mt-4 flex items-center justify-center text-gray-500 text-sm">
      <i class="fas fa-shield-alt mr-2 text-green-500"></i>
      Secure Checkout
    </div>
  </div>
</div>
    </div>
  </div>

  <%- include('../partials/user/footer') %>

  <script>
document.addEventListener('DOMContentLoaded', function () {
  let isNotificationActive = false;

  function showNotification(message, isSuccess = true) {
    if (isNotificationActive) return;
    isNotificationActive = true;

    const notification = document.createElement('div');
    notification.className = `text-white px-4 py-2 rounded shadow-lg ${
      isSuccess ? 'bg-green-500' : 'bg-red-500'
    }`;
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '1000';
    notification.style.transform = 'translateX(100%)';
    notification.style.transition = 'transform 0.3s ease-out';
    document.body.appendChild(notification);
    setTimeout(() => (notification.style.transform = 'translateX(0)'), 10);
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        notification.remove();
        isNotificationActive = false;
      }, 300);
    }, 3000);
  }

  function updateOrderSummary(data) {
    document.getElementById('subtotal').textContent = `₹${data.subtotal.toFixed(2)}`;
    const discountContainer = document.getElementById('discount')?.parentElement;
    if (data.discount > 0) {
      if (!discountContainer) {
        const discountDiv = document.createElement('div');
        discountDiv.className = 'flex justify-between text-sm text-green-600';
        discountDiv.innerHTML = `<span>Discount</span><span id="discount">-₹${data.discount.toFixed(2)}</span>`;
        document.getElementById('shipping').parentElement.insertAdjacentElement('beforebegin', discountDiv);
      } else {
        document.getElementById('discount').textContent = `-₹${data.discount.toFixed(2)}`;
      }
    } else if (discountContainer) {
      discountContainer.remove();
    }
    document.getElementById('shipping').textContent = `₹${data.shippingCost.toFixed(2)}`;
    document.getElementById('tax').textContent = `₹${data.tax.toFixed(2)}`;
    document.getElementById('total').textContent = `₹${data.total.toFixed(2)}`;
    const cartCountEl = document.getElementById('cart-count');
    if (cartCountEl) cartCountEl.textContent = data.cartCount;
  }

  function updateCartContents() {
    fetch('/cart/summary', { 
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          updateOrderSummary(data);
        }
      })
      .catch((error) => console.error('Error updating summary:', error));
  }

  function attachEventListeners() {
    document.querySelectorAll('.update-quantity-btn').forEach((button) => {
      button.addEventListener('click', function (e) {
        e.preventDefault();
        const productId = this.getAttribute('data-product-id');
        const action = this.getAttribute('data-action');
        const quantityInput = this.parentElement.querySelector('.quantity-input');
        const currentQuantity = parseInt(quantityInput.value);
        const maxQuantity = parseInt(quantityInput.getAttribute('max'));

        fetch('/cart/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, action }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              const maxLimit = 5
              const newQuantity = action === 'increase' ? currentQuantity + 1 : currentQuantity - 1;

              if(newQuantity>maxLimit){
                showNotification(`You can only add up to ${maxLimit} units of this product.`, false);
                return
              }
              if (newQuantity >= 1 && newQuantity <= maxQuantity) {
                quantityInput.value = newQuantity;
                const totalPriceEl = quantityInput.closest('.cart-item').querySelector('.total-price');
                const salePrice = parseFloat(totalPriceEl.getAttribute('data-sale-price'));
                const newTotal = (salePrice * newQuantity).toFixed(2);
                totalPriceEl.textContent = `₹${newTotal}`;
                totalPriceEl.setAttribute('data-total', newTotal);
                updateOrderSummary(data);
                showNotification(`Quantity ${action === 'increase' ? 'increased' : 'decreased'} successfully!`);
              } else {
                showNotification(`Cannot ${action} quantity beyond ${maxQuantity}`, false);
              }
            } else {
              showNotification(data.message || 'Failed to update quantity', false);
            }
          })
          .catch((error) => {
            console.error('Error:', error);
            showNotification('An error occurred', false);
          });
      });
    });

    document.querySelectorAll('.remove-form').forEach((form) => {
      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const productId = this.querySelector('input[name="productId"]').value;

        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to remove this product from your cart?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, remove it!',
          cancelButtonText: 'Cancel'
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch('/cart/remove', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ productId }),
            });
            const data = await response.json();

            if (data.success) {
              updateOrderSummary(data);
              const item = document.querySelector(`.cart-item[data-product-id="${productId}"]`);
              if (item) item.remove();
              await Swal.fire({
                title: 'Removed!',
                text: 'Product removed from cart.',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
              if (!document.querySelectorAll('.cart-item').length || data.cartCount === 0) {
                location.reload();
              }
            } else {
              await Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to remove product',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
              title: 'Error!',
              text: 'An error occurred. Please try again.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      });
    });
  }

  setInterval(updateCartContents, 5000);
  attachEventListeners();
});
  </script>
</body>
</html>
