<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Supreme</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root {
            --primary-color: #1a3c34;
            --secondary-color: #e0ecf8;
            --dark-text: #1a3c34;
            --light-text: #5f8b88;
            --success: #2ecc71;
            --warning: #f1c40f;
            --danger: #e74c3c;
            --pending: #e67e22;
            --border-radius: 8px;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.15);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.15), 0 4px 6px -2px rgba(0, 0, 0, 0.1);
            --header-height: 60px;
            --footer-height: 60px;
        }

        body {
            background-color: #d1e6e3;
            font-family: 'Inter', 'Segoe UI', 'Arial', sans-serif;
            color: var(--dark-text);
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 100%;
            padding: 0;
            margin: 0;
            width: 100vw;
        }

        .grid {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 0;
            width: 100%;
            max-width: 100%;
        }

        .partial .sidebar {
            margin-left: -85px;
        }

        .content {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 40px;
            width: 100%;
            max-width: none;
            margin-left: -10px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(26, 60, 52, 0.2);
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--dark-text);
            margin: 0;
        }

        .empty-state {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 3rem 2rem;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1.5rem;
        }

        .empty-state-icon {
            width: 64px;
            height: 64px;
            background-color: rgba(26, 60, 52, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-color);
            font-size: 1rem;
        }

        .empty-state p {
            color: var(--light-text);
            font-size: 1rem;
            max-width: 400px;
            margin: 0 auto;
        }

        .order-grid {
            width: 100%;
            max-width: 100%;
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .order-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            background-color: var(--secondary-color);
            border-bottom: 1px solid rgba(26, 60, 52, 0.1);
        }

        .order-id-container {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .order-date {
            color: var(--light-text);
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .order-date i {
            font-size: 0.8rem;
        }

        .order-body {
            padding: 1.25rem 1.5rem;
            display: flex;
            gap: 1.25rem;
        }

        .product-image-container {
            width: 70px;
            height: 70px;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow-sm);
            flex-shrink: 0;
            background-color: var(--secondary-color);
        }

        .product-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .order-details {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .product-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--dark-text);
            line-height: 1.4;
        }

        .order-quantity {
            color: var(--light-text);
            font-size: 0.9rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .order-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-top: 1px solid rgba(26, 60, 52, 0.1);
            background-color: var(--secondary-color);
        }

        .status-payment-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .status-badge {
            padding: 0.35rem 0.75rem;
            border-radius: 2rem;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.35rem;
        }

        .status-badge i {
            font-size: 0.7rem;
        }

        .status-completed {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--success);
        }

        .status-processing {
            background-color: rgba(230, 126, 34, 0.1);
            color: var(--pending);
        }

.status-returned {
    background-color: rgba(231, 76, 60, 0.1);
    color: #e74c3c;
}
.status-cancelled {
    background-color: rgba(192, 57, 43, 0.1);
    color: #c0392b;
}
.status-return-requested {
    background-color: rgba(241, 196, 15, 0.1);
    color: #f39c12;
}
.status-shipped {
    background-color: rgba(52, 152, 219, 0.1);
    color: #2980b9;
}
.status-partially-returned {
    background-color: rgba(231, 76, 60, 0.1);
    color: #e74c3c;
}
.status-partially-cancelled {
    background-color: rgba(192, 57, 43, 0.1);
    color: #c0392b;
}
        .payment-badge {
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.35rem;
        }

        .payment-badge i {
            font-size: 0.7rem;
        }

        .payment-badge.pending {
            color: var(--warning);
        }

        .payment-badge.completed {
            color: var(--success);
        }

        .price-actions-container {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .order-amount {
            font-weight: 700;
            font-size: 1.1rem;
            color: var(--dark-text);
        }

        .view-details-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.85rem;
            border-radius: var(--border-radius);
            background-color: var(--primary-color);
            color: white;
            text-decoration: none;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .view-details-btn:hover {
            background-color: #2a5c54;
            color: white;
            transform: translateY(-1px);
        }

        .view-details-btn i {
            font-size: 0.75rem;
        }

        .search-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .search-container input {
            border: 1px solid rgba(26, 60, 52, 0.2);
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            color: var(--dark-text);
            background-color: var(--secondary-color);
            transition: all 0.2s ease;
        }

        .search-container input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 60, 52, 0.1);
        }

        .search-container button {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        .filter-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            padding-bottom: 1rem;
        }

        .filter-select {
            border: 1px solid rgba(26, 60, 52, 0.2);
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            color: var(--dark-text);
            background-color: var(--secondary-color);
            border-radius: var(--border-radius);
            min-width: 150px;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 60, 52, 0.1);
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 2rem;
            gap: 0.5rem;
        }

        .pagination-btn {
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            background-color: var(--secondary-color);
            color: var(--dark-text);
            border: 1px solid rgba(26, 60, 52, 0.2);
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .pagination-btn:hover {
            background-color: var(--primary-color);
            color: white;
        }

        .pagination-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination-btn:disabled {
            background-color: #f1f1f1;
            color: #999;
            border-color: #ddd;
            cursor: not-allowed;
        }

        @media (max-width: 1280px) {
            .page-container {
                margin: 0 auto;
                padding: 2rem 1rem;
            }
        }

        @media (max-width: 1024px) {
            .content {
                margin-left: -5px;
            }
        }

        @media (max-width: 767px) {
            .container {
                padding: 0.5rem;
            }

            .page-container {
                padding: 1rem;
            }

            .grid {
                grid-template-columns: 1fr;
            }

            .partial .sidebar {
                margin-left: 0;
            }

            .content {
                margin-left: 0;
            }

            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
                margin-bottom: 1.5rem;
            }

            .search-container {
                width: 100%;
                flex-direction: column;
                align-items: flex-start;
            }

            .search-container input {
                width: 100%;
                max-width: none;
            }

            .search-container button {
                width: 100%;
                justify-content: center;
            }

            .order-header,
            .order-body,
            .order-footer {
                padding: 1rem;
            }

            .order-header {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-start;
            }

            .order-id-container {
                width: 100%;
            }

            .order-footer {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .price-actions-container {
                width: 100%;
                justify-content: space-between;
            }

            .empty-state {
                padding: 2rem 1rem;
            }

            .filter-container {
                flex-direction: column;
                align-items: stretch;
            }

            .filter-select {
                width: 100%;
            }

            .pagination-container {
                flex-wrap: wrap;
            }
        }

        @media (max-width: 480px) {
            .page-title {
                font-size: 1.5rem;
            }

            .order-body {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }

            .product-image-container {
                width: 100px;
                height: 100px;
            }

            .order-details {
                text-align: center;
            }

            .order-quantity {
                justify-content: center;
            }

            .view-details-btn {
                width: 100%;
                justify-content: center;
                margin-top: 0.5rem;
            }

            .price-actions-container {
                flex-direction: column;
                align-items: center;
                gap: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="partial">
        <%- include("../../views/partials/user/header") %>
    </div>

    <div class="container">
        <h1>My Orders</h1>
        <div class="grid">
            <div class="partial">
                <%- include("../../views/partials/user/sidebar") %>
            </div>
            <div class="content">
                <div class="page-header">
                    <h2 class="page-title">My Orders</h2>
                    <div class="search-container">
    <input 
    type="text" 
    id="orderSearch" 
    class="form-control" 
    placeholder="Search orders by product or status..." 
    value="<%= filters.search || '' %>" 
    style="max-width: 300px; border-radius: var(--border-radius);"
>
    <button id="searchBtn" class="view-details-btn ms-2">
        Search
    </button>
    <button id="clearSearchBtn" class="view-details-btn ms-1" style="background-color: #95a5a6;">
        Clear
    </button>
</div>
                </div>
                
                <!-- <div class="filter-container">
                    <select id="statusFilter" class="filter-select">
                        <option value="">All Statuses</option>
                        <option value="processing">Processing</option>
                        <option value="completed">Completed</option>
                    </select>
                    <select id="timeFilter" class="filter-select">
                        <option value="">All Time</option>
                        <option value="last30">Last 30 Days</option>
                        <option value="last90">Last 90 Days</option>
                        <option value="lastYear">Last Year</option>
                    </select>
                </div> -->
                
                <% if (orders.length === 0) { %>
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                        <h3>No Orders Yet</h3>
                        <p><%= message %></p>
                        <a href="/shop" class="view-details-btn">
                            <i class="fas fa-shopping-cart"></i>
                            Browse Products
                        </a>
                    </div>
                <% } else { %>
                    <div class="order-grid" id="orderGrid">
                        <% orders.forEach(order => { %>
    <div class="order-card" 
         data-order-id="<%= order._id %>"              
         data-product="<%= order.orderItems[0]?.productName?.toLowerCase() || '' %>" 
         data-status="<%= order.status.toLowerCase() %>" 
         data-date="<%= order.createdAt.toISOString() %>">
        
        <div class="order-header">
            <div class="order-id-container">
                <span class="order-date">
                    <i class="far fa-calendar-alt"></i>
                    <%= order.createdAt.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                </span>
            </div>
            <!-- <div class="payment-status-container">
                <span class="payment-badge <%= order.paymentStatus === 'Pending' ? 'pending' : 'completed' %>">
                    <i class="<%= order.paymentStatus === 'Pending' ? 'fas fa-hourglass-half' : 'fas fa-check-circle' %>"></i>
                    <%= order.paymentStatus %>
                </span>
            </div> -->
        </div>
                                <div class="order-body">
                                    <div class="product-image-container">
                                        <img
                                            src="<%= order.orderItems[0]?.image || '/default-image.jpg' %>"
                                            alt="<%= order.orderItems[0]?.productName || 'Product' %>"
                                            class="product-image"
                                            onerror="this.src='/default-image.jpg';"
                                        />
                                    </div>
                                    <div class="order-details">
                                        <h4 class="product-name"><%= order.orderItems[0]?.productName || 'Unknown Product' %></h4>
                                        <% if (order.orderItems.length > 1) { %>
                                            <p class="order-quantity">
                                                <i class="fas fa-cubes"></i>
                                                <%= order.orderItems.length %> items in this order
                                            </p>
                                        <% } %>
                                    </div>
                                </div>

                                <div class="order-footer">
                                    <div class="status-payment-container">
    <span class="status-badge 
        <%= 
          ['delivered', 'completed'].includes(order.status) ? 'status-completed' :
          ['returned', 'partially_returned'].includes(order.status) ? 'status-returned' :
          ['cancelled', 'partially_cancelled'].includes(order.status) ? 'status-cancelled' :
          ['return_requested', 'return_requested'].includes(order.status) ? 'status-return-requested' :
          ['shipped'].includes(order.status) ? 'status-shipped' :
          'status-processing'
        %>">
        <i class="<%= 
          ['delivered', 'completed'].includes(order.status) ? 'fas fa-check-circle' :
          ['returned', 'partially_returned'].includes(order.status) ? 'fas fa-undo' :
          ['cancelled', 'partially_cancelled'].includes(order.status) ? 'fas fa-ban' :
          ['return_requested'].includes(order.status) ? 'fas fa-clock' :
          ['shipped'].includes(order.status) ? 'fas fa-truck' :
          'fas fa-cogs'
        %>"></i>
        <%= 
          order.status === 'partially_returned' ? 'Partially Returned' :
          order.status === 'partially_cancelled' ? 'Partially Cancelled' :
          order.status === 'return_requested' ? 'Return Requested' :
          order.status.charAt(0).toUpperCase() + order.status.slice(1)
        %>
    </span>
</div>

                                    <div class="price-actions-container">
                                        <span class="order-amount">₹<%= order.finalAmount.toFixed(2) %></span>
                                        <a href="/order-details/<%= order._id %>" class="view-details-btn">
                                            <i class="fas fa-eye"></i>
                                            View Details
                                        </a>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    </div>

                    <div class="pagination-container">
                        <button class="pagination-btn" id="prevPage" <%= currentPage === 1 ? 'disabled' : '' %>>Previous</button>
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <button class="pagination-btn <%= i === currentPage ? 'active' : '' %>" data-page="<%= i %>"><%= i %></button>
                        <% } %>
                        <button class="pagination-btn" id="nextPage" <%= currentPage === totalPages ? 'disabled' : '' %>>Next</button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <div class="partial">
        <%- include("../../views/partials/user/footer") %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
   <script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('orderSearch');
    const searchBtn = document.getElementById('searchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const orderGrid = document.getElementById('orderGrid');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const pageButtons = document.querySelectorAll('.pagination-btn[data-page]');

    // ── FETCH ORDERS FROM SERVER ──
    async function fetchOrders(page = 1, search = '') {
        const url = new URL('/orders', window.location.origin);
        url.searchParams.set('page', page);
        if (search) url.searchParams.set('search', search);

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Network error');
            const html = await response.text();

            // Parse HTML and extract only the order grid + pagination
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newGrid = doc.querySelector('#orderGrid');
            const newPagination = doc.querySelector('.pagination-container');

            if (newGrid) orderGrid.innerHTML = newGrid.innerHTML;
            if (newPagination) {
                document.querySelector('.pagination-container').outerHTML = newPagination.outerHTML;
            }

            // Re-attach event listeners
            attachPaginationListeners();
            applyLiveSearch(); // Re-apply live search on new cards
        } catch (err) {
            console.error('Fetch error:', err);
            Swal.fire('Error', 'Failed to load orders', 'error');
        }
    }

    // ── LIVE SEARCH (Client-side) ──
    function applyLiveSearch() {
        const query = searchInput.value.toLowerCase().trim();
        const cards = document.querySelectorAll('.order-card');

        cards.forEach(card => {
            const product = (card.dataset.product || '').toLowerCase();
            const status = (card.dataset.status || '').toLowerCase();
            const matches = !query || product.includes(query) || status.includes(query);
            card.style.display = matches ? 'block' : 'none';
        });
    }

    // ── RE-ATTACH PAGINATION LISTENERS AFTER FETCH ──
    function attachPaginationListeners() {
        const newPrev = document.getElementById('prevPage');
        const newNext = document.getElementById('nextPage');
        const newPageBtns = document.querySelectorAll('.pagination-btn[data-page]');

        if (newPrev) newPrev.onclick = () => {
            const page = parseInt(newPrev.dataset.page || '<%= currentPage %>') - 1;
            if (page >= 1) fetchOrders(page, searchInput.value.trim());
        };
        if (newNext) newNext.onclick = () => {
            const page = parseInt(newNext.dataset.page || '<%= currentPage %>') + 1;
            fetchOrders(page, searchInput.value.trim());
        };
        newPageBtns.forEach(btn => {
            btn.onclick = () => fetchOrders(btn.dataset.page, searchInput.value.trim());
        });
    }

    // ── EVENT LISTENERS ──
    if (searchBtn) {
        searchBtn.addEventListener('click', () => {
            fetchOrders(1, searchInput.value.trim());
        });
    }

    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', () => {
            searchInput.value = '';
            fetchOrders(1, '');
        });
    }

    searchInput.addEventListener('keypress', e => {
        if (e.key === 'Enter') {
            fetchOrders(1, searchInput.value.trim());
        }
    });

    // Live search while typing
    searchInput.addEventListener('input', applyLiveSearch);

    // Initial pagination
    attachPaginationListeners();

    // Apply live search on load
    applyLiveSearch();

    // ────── CANCEL / RETURN (Keep existing fetch) ──────
    const confirmCancelBtn = document.getElementById('confirmCancelBtn');
    if (confirmCancelBtn) {
        confirmCancelBtn.addEventListener('click', async () => {
            const cancelForm = document.getElementById('cancelForm');
            const orderId = document.getElementById('orderId').value;
            const productId = document.getElementById('productId').value;
            const actionType = document.getElementById('actionType').value;
            const reason = document.getElementById('cancelReason').value === 'Other'
                ? document.getElementById('otherReason').value
                : document.getElementById('cancelReason').value;

            if (!cancelForm.checkValidity()) return cancelForm.reportValidity();

            const endpoint = actionType === 'cancel'
                ? `/orders/${orderId}/cancel-item`
                : `/orders/${orderId}/return`;

            try {
                const res = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, productId, reason })
                });
                const result = await res.json();

                const modal = document.getElementById('cancelModal');
                bootstrap.Modal.getInstance(modal).hide();

                if (result.success) {
                    Swal.fire('Success', result.message, 'success').then(() => {
                        // Update badge
                        const card = document.querySelector(`[data-order-id="${orderId}"]`);
                        if (card && result.orderStatus) {
                            const badge = card.querySelector('.status-badge');
                            const status = result.orderStatus.toLowerCase();
                            const displayText = 
                                status === 'partially_returned' ? 'Partially Returned' :
                                status === 'partially_cancelled' ? 'Partially Cancelled' :
                                status === 'return_requested' ? 'Return Requested' :
                                status.charAt(0).toUpperCase() + status.slice(1);

                            badge.textContent = displayText;
                            badge.className = 'status-badge ' + 
                                (status === 'delivered' || status === 'completed' ? 'status-completed' :
                                 ['returned', 'partially_returned'].includes(status) ? 'status-returned' :
                                 ['cancelled', 'partially_cancelled'].includes(status) ? 'status-cancelled' :
                                 status === 'return_requested' ? 'status-return-requested' :
                                 status === 'shipped' ? 'status-shipped' : 'status-processing');
                            card.dataset.status = status;
                            applyLiveSearch();
                        }
                    });
                } else {
                    Swal.fire('Error', result.message || 'Failed', 'error');
                }
            } catch (err) {
                console.error(err);
                Swal.fire('Error', 'Network error', 'error');
            }
        });
    }
});
</script>
</body>
</html>
