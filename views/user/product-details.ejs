<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <title><%= product.productName %> - Pure Botanica</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      body {
        font-family: "Montserrat", sans-serif;
      }
      .product-image {
        transition: transform 0.3s ease-in-out;
        object-fit: contain;
        border-radius: 8px;
        image-rendering: -webkit-optimize-contrast; 
        image-rendering: crisp-edges; 
      }
      .product-image:hover {
        transform: scale(1.05);
      }
      .thumbnail {
        cursor: pointer;
        opacity: 0.6;
        transition: opacity 0.3s;
      }
      .thumbnail.active {
        opacity: 1;
      }
      .sold-out {
        color: #ff0000;
        font-weight: bold;
      }
      .available {
        color: #10b981;
        font-weight: bold;
      }
      .related-product-card {
        transition: transform 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        height: 100%;
      }
      .related-product-card:hover {
        transform: translateY(-5px);
      }
      .quantity-input {
        width: 3rem;
        text-align: center;
        border: 1px solid #d1d5db;
        border-radius: 0.25rem;
        padding: 0.5rem;
      }
      .quantity-btn {
        background-color: #e5e7eb;
        color: #374151;
        padding: 0.5rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
      }
      .quantity-btn:hover {
        background-color: #d1d5db;
      }
      .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
      .image-container {
        position: relative;
        width: 100%;
        height: 400px;
      }
      .zoom-lens {
        position: absolute;
        border: 1px solid #d4d4d4;
        width: 100px;
        height: 100px;
        background-color: rgba(255, 255, 255, 0.3);
        cursor: none;
        display: none;
      }
      .zoom-result {
        position: absolute;
        top: 0;
        left: 100%;
        margin-left: 20px;
        width: 300px;
        height: 300px;
        border: 1px solid #d4d4d4;
        background-color: #fff;
        display: none;
        overflow: hidden;
        z-index: 10;
      }
    </style>
  </head>
  <body class="bg-white text-black">
    <%- include("../partials/user/header") %>
    <nav class="max-w-[1400px] mx-auto px-8 py-4 text-sm text-gray-600" style="margin-top: 80px;">
      <ol class="flex space-x-2">
        <li><a href="/" class="hover:underline">Home</a></li>
        <li><span>></span></li>
        <li><a href="/shop" class="hover:underline">Shop</a></li>
        <li><span>></span></li>
        <li><%= product.productName %></li>
      </ol>
    </nav>
    <main class="max-w-[1400px] mx-auto px-8 py-12">
      <% if (product) { %>
        <div class="flex flex-col md:flex-row gap-12">
          <div class="w-full md:w-1/2">
            <div class="image-container">
              <img
                id="mainImage"
                alt="<%= product.productName %>"
                class="w-full h-[400px] product-image mb-4"
                src="<%= product.productImages.length > 0 ? '/Uploads/product-images/' + product.productImages[0] : 'https://via.placeholder.com/400' %>"
              />
              <div id="zoomLens" class="zoom-lens"></div>
              <div id="zoomResult" class="zoom-result"></div>
            </div>
            <div class="flex space-x-2">
              <% product.productImages.forEach((img, index) => { %>
                <img
                  alt="<%= product.productName %> thumbnail <%= index %>"
                  class="w-20 h-20 thumbnail <%= index === 0 ? 'active' : '' %>"
                  src="/Uploads/product-images/<%= img %>"
                  data-index="<%= index %>"
                />
              <% }) %>
            </div>
          </div>
          <div class="w-full md:w-1/2">
            <h1 class="text-3xl font-bold mb-4 text-gray-800"><%= product.productName %></h1>
            <div class="mb-4 flex items-center">
              <span class="text-yellow-400">
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star"></i>
                <i class="fas fa-star-half-alt"></i>
              </span>
            </div>
            <div class="mb-4">
              <% if (product.regularPrice && product.regularPrice > product.salePrice) { %>
                <span class="text-2xl font-bold text-gray-800">₹<%= product.salePrice.toFixed(2) %></span>
                <span class="text-lg line-through text-gray-500 ml-2">₹<%= product.regularPrice.toFixed(2) %></span>
                <span class="text-green-600 ml-2">
                  (<%= Math.round(((product.regularPrice - product.salePrice) / product.regularPrice) * 100) %>% off)
                </span>
              <% } else { %>
                <span class="text-2xl font-bold text-gray-800">₹<%= product.salePrice.toFixed(2) %></span>
              <% } %>
            </div>
            <% if (discountsApplied) { %>
              <div class="mb-4 text-green-600">
                Discounts Applied: <%= discountsApplied %>
              </div>
            <% } %>
            <div class="mb-4">
              <% if (product.quantity > 0) { %>
                <span class="available">Available (<%= product.quantity %> in stock)</span>
              <% } else { %>
                <span class="sold-out">Out of Stock</span>
                <p class="text-gray-600">This item is currently out of stock</p>
                <div class="flex mt-2">
                  <input type="email" placeholder="Enter email to get notified" class="p-2 border border-gray-300 rounded text-sm w-64" />
                  <button class="ml-2 bg-orange-500 text-white px-4 py-2 rounded">NOTIFY ME</button>
                </div>
              <% } %>
            </div>
            <div class="flex items-center gap-4 mb-4">
              <% if (product.quantity > 0) { %>
                <div class="flex items-center gap-2">
                  <button id="decreaseQty" class="quantity-btn"><i class="fas fa-minus"></i></button>
                  <input id="quantity" type="number" value="1" min="1" max="<%= product.quantity %>" class="quantity-input" />
                  <button id="increaseQty" class="quantity-btn"><i class="fas fa-plus"></i></button>
                </div>
              <% } %>
              <button 
                id="addToCartBtn"
                class="bg-black text-white text-sm font-semibold px-6 py-3 rounded hover:bg-gray-800 transition-colors <%= product.quantity === 0 ? 'opacity-50 cursor-not-allowed' : '' %>"
                <%= product.quantity === 0 ? 'disabled' : '' %>
                data-product-id="<%= product._id %>"
              >
                ADD TO CART
              </button>
            </div>
            <section class="mt-8">
              <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">Product Description</h3>
              <p class="text-gray-700"><%= product.description || 'No description available.' %></p>
            </section>
            <section class="mt-8">
              <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">Skin Concern</h3>
              <p class="text-gray-700"><%= product.skinConcern || 'Not specified.' %></p>
            </section>
            <section class="mt-8">
              <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">Skin Type</h3>
              <p class="text-gray-700"><%= product.skinType || 'Not specified.' %></p>
            </section>
            <section class="mt-8">
              <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">How to Use</h3>
              <p class="text-gray-700"><%= product.howToUse || 'No usage instructions provided.' %></p>
            </section>
          </div>
        </div>
        <section class="mt-12">
          <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">Reviews</h3>
          <p class="text-gray-600">No reviews yet.</p>
        </section>
        <section class="mt-12">
          <h3 class="font-bold text-lg mb-4 text-[#1a4a5a]">Related Products</h3>
          <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-8">
            <% relatedProducts.forEach(relProduct => { %>
              <div class="related-product-card flex flex-col items-center p-4 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                <a href="/product/<%= relProduct._id %>">
                  <img
                    alt="<%= relProduct.productName %>"
                    class="mb-4 product-image cursor-pointer w-32 h-32"
                    src="<%= relProduct.productImages.length > 0 ? '/Uploads/product-images/' + relProduct.productImages[0] : 'https://via.placeholder.com/150' %>"
                  />
                </a>
                <div class="font-bold text-base mb-2 text-gray-800 text-center">
                  <%= relProduct.productName.toUpperCase() %>
                </div>
                <div class="mb-3 text-gray-600">₹<%= relProduct.salePrice.toFixed(2) %></div>
                <button 
                  class="bg-black text-white text-sm font-semibold px-4 py-1 rounded hover:bg-gray-800 transition-colors add-to-cart-btn"
                  data-product-id="<%= relProduct._id %>"
                  <%= relProduct.quantity === 0 ? 'disabled' : '' %>
                >
                  <%= relProduct.quantity === 0 ? 'OUT OF STOCK' : 'ADD TO CART' %>
                </button>
              </div>
            <% }) %>
          </div>
        </section>
      <% } else { %>
        <div class="text-center text-gray-600">Product not found or unavailable.</div>
      <% } %>
    </main>
    <%- include("../partials/user/footer") %>
    <script>
  const thumbnails = document.querySelectorAll('.thumbnail');
  const mainImage = document.getElementById('mainImage');
  thumbnails.forEach(thumb => {
    thumb.addEventListener('click', () => {
      thumbnails.forEach(t => t.classList.remove('active'));
      thumb.classList.add('active');
      mainImage.src = thumb.src;
      const zoomResult = document.getElementById('zoomResult');
      zoomResult.style.backgroundImage = `url(${thumb.src})`;
    });
  });
  const maxLimit = 5;
const quantityInput = document.getElementById('quantity');
const decreaseQty = document.getElementById('decreaseQty');
const increaseQty = document.getElementById('increaseQty');

if (quantityInput && decreaseQty && increaseQty) {
  const originalMax = parseInt(quantityInput.max);
  const effectiveMax = Math.min(originalMax, maxLimit);

  let notificationActive = false;

  const showLimitAlert = () => {
    if (notificationActive) return;
    notificationActive = true;
    Swal.fire({
      icon: 'warning',
      title: 'Limit reached',
      text: `You can only buy up to ${maxLimit} units of this product.`,
      confirmButtonColor: '#108a7e'
    }).then(() => {
      notificationActive = false;
    });
  };

  decreaseQty.addEventListener('click', () => {
    let value = parseInt(quantityInput.value) || 1;
    if (value > 1) quantityInput.value = value - 1;

    decreaseQty.disabled = parseInt(quantityInput.value) <= 1;
    increaseQty.disabled = parseInt(quantityInput.value) >= effectiveMax;
  });

  increaseQty.addEventListener('click', () => {
    let value = parseInt(quantityInput.value) || 1;
    if (value < effectiveMax) {
      quantityInput.value = value + 1;
    } else {
      // Use setTimeout to let DOM update first
      setTimeout(showLimitAlert, 50);
    }

    decreaseQty.disabled = parseInt(quantityInput.value) <= 1;
    increaseQty.disabled = parseInt(quantityInput.value) >= effectiveMax;
  });

  quantityInput.addEventListener('input', () => {
    let value = parseInt(quantityInput.value) || 1;

    if (value < 1) value = 1;

    if (value > effectiveMax) {
      quantityInput.value = effectiveMax;
      setTimeout(showLimitAlert, 50); // separate DOM update from alert
    } else {
      quantityInput.value = value;
    }

    decreaseQty.disabled = value <= 1;
    increaseQty.disabled = value >= effectiveMax;
  });
}


  async function addToCart(productId, quantity) {
    try {
      const response = await fetch(`/product/availability/${productId}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      
      if (data.available) {
        const cartResponse = await fetch('/cart/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, quantity })
        });
        const cartData = await cartResponse.json();
        
        if (cartData.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: `Added ${quantity} item(s) to cart!`,
            showConfirmButton: false,
            timer: 1500
          });
          
          // Update cart count
          const cartCountEl = document.getElementById('cart-count');
          if (cartCountEl && cartData.cartCount) {
            cartCountEl.textContent = cartData.cartCount;
          }
          
          // Check if full stock is in cart and update button
          await checkCartQuantityAndUpdateButton(productId);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: cartData.message || 'Failed to add product to cart',
            showConfirmButton: false,
            timer: 2000
          });
        }
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Out of Stock',
          text: `Only ${data.quantity || 0} item(s) available in stock.`,
          showConfirmButton: false,
          timer: 2000
        });
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while adding the product to the cart.',
        showConfirmButton: false,
        timer: 2000
      });
    }
  }

  // New function to check cart quantity and update button state
  async function checkCartQuantityAndUpdateButton(productId) {
    try {
      const response = await fetch('/cart/check-quantity', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId })
      });
      
      if (!response.ok) return;
      
      const data = await response.json();
      const button = document.querySelector(`#addToCartBtn[data-product-id="${productId}"]`);
      const relatedButton = document.querySelector(`.add-to-cart-btn[data-product-id="${productId}"]`);
      
      // Update main product button
      if (button && data.inCart && data.cartQuantity >= data.stockQuantity && data.stockQuantity > 0) {
        updateButtonToGoToCart(button, true);
      } else if (button) {
        updateButtonToAddToCart(button, true);
      }
      
      // Update related product button
      if (relatedButton && data.inCart && data.cartQuantity >= data.stockQuantity && data.stockQuantity > 0) {
        updateButtonToGoToCart(relatedButton, false);
      } else if (relatedButton) {
        updateButtonToAddToCart(relatedButton, false);
      }
    } catch (error) {
      console.error('Error checking cart quantity:', error);
    }
  }

  function updateButtonToGoToCart(button, isMainButton) {
    button.textContent = 'GO TO CART';
    button.classList.remove('bg-black', 'hover:bg-gray-800');
    button.classList.add('bg-green-600', 'hover:bg-green-700');
    button.dataset.mode = 'goto-cart';
    
    // Disable quantity controls if it's the main button
    if (isMainButton) {
      const qtyInput = document.getElementById('quantity');
      const decreaseBtn = document.getElementById('decreaseQty');
      const increaseBtn = document.getElementById('increaseQty');
      
      if (qtyInput) qtyInput.disabled = true;
      if (decreaseBtn) decreaseBtn.disabled = true;
      if (increaseBtn) increaseBtn.disabled = true;
    }
  }

  function updateButtonToAddToCart(button, isMainButton) {
    button.textContent = 'ADD TO CART';
    button.classList.remove('bg-green-600', 'hover:bg-green-700');
    button.classList.add('bg-black', 'hover:bg-gray-800');
    button.dataset.mode = 'add-to-cart';
    
    // Enable quantity controls if it's the main button
    if (isMainButton) {
      const qtyInput = document.getElementById('quantity');
      const decreaseBtn = document.getElementById('decreaseQty');
      const increaseBtn = document.getElementById('increaseQty');
      
      if (qtyInput) qtyInput.disabled = false;
      if (decreaseBtn) decreaseBtn.disabled = parseInt(qtyInput.value) <= 1;
      if (increaseBtn) increaseBtn.disabled = parseInt(qtyInput.value) >= parseInt(qtyInput.max);
    }
  }

  function attachAddToCartListeners() {
    document.querySelectorAll('.add-to-cart-btn, #addToCartBtn').forEach(button => {
      button.addEventListener('click', async () => {
        if (button.disabled) return;
        
        // Check if button is in "GO TO CART" mode
        if (button.dataset.mode === 'goto-cart') {
          window.location.href = '/cart';
          return;
        }
        
        const productId = button.getAttribute('data-product-id');
        const quantity = button.id === 'addToCartBtn' && quantityInput ? parseInt(quantityInput.value) : 1;
        await addToCart(productId, quantity);
      });
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    attachAddToCartListeners();
    
    // Check initial state for main product
    const mainButton = document.getElementById('addToCartBtn');
    if (mainButton) {
      const productId = mainButton.getAttribute('data-product-id');
      await checkCartQuantityAndUpdateButton(productId);
    }
    
    // Check state for related products
    const relatedButtons = document.querySelectorAll('.add-to-cart-btn');
    for (const button of relatedButtons) {
      const productId = button.getAttribute('data-product-id');
      await checkCartQuantityAndUpdateButton(productId);
    }
  });

  // Zoom functionality
  const imageContainer = document.querySelector('.image-container');
  const zoomLens = document.getElementById('zoomLens');
  const zoomResult = document.getElementById('zoomResult');

  if (imageContainer && zoomLens && zoomResult) {
    zoomResult.style.backgroundImage = `url(${mainImage.src})`;
    zoomResult.style.backgroundSize = `${mainImage.width * 2}px ${mainImage.height * 2}px`;

    imageContainer.addEventListener('mousemove', (e) => {
      const rect = mainImage.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      zoomLens.style.display = 'block';
      zoomResult.style.display = 'block';

      let lensX = x - zoomLens.offsetWidth / 2;
      let lensY = y - zoomLens.offsetHeight / 2;

      lensX = Math.max(0, Math.min(lensX, mainImage.width - zoomLens.offsetWidth));
      lensY = Math.max(0, Math.min(lensY, mainImage.height - zoomLens.offsetHeight));

      zoomLens.style.left = `${lensX}px`;
      zoomLens.style.top = `${lensY}px`;

      const rx = (lensX / mainImage.width) * (mainImage.width * 2);
      const ry = (lensY / mainImage.height) * (mainImage.height * 2);
      zoomResult.style.backgroundPosition = `-${rx}px -${ry}px`;
    });

    imageContainer.addEventListener('mouseleave', () => {
      zoomLens.style.display = 'none';
      zoomResult.style.display = 'none';
    });
  }
</script> 
  </body>
</html>


<!-- //this is my product details page and i want to change the button if i add to cart full stock then it will change to go to cart
maintain the rest// -->